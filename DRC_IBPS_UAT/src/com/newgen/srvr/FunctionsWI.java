/**
 * <p>Title: Auto Create Server</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: Newgen Software Technologies Ltd.</p>
 * @author Piyush Pratap Singh
 * @version 1.0
 */

package com.newgen.srvr;

import com.newgen.wfdesktop.xmlapi.WFCallBroker;
import java.net.*;
import com.newgen.srvr.XML.XMLGen;
import com.newgen.srvr.XML.XMLParser;
import com.newgen.ibm.commons.DRCWebservice_UtilityHelper;
import com.newgen.omni.wf.util.excp.NGException;
import com.newgen.ibm.commons.CreateLog;
import com.newgen.ibm.commons.CreateErrorData;

public class FunctionsWI {
 
	private CreateLog log=new CreateLog();
	private CreateErrorData elog=new CreateErrorData();
    XMLParser xmlParser = new XMLParser();
    public String userName = "";
    public String userID = "";
    public String password = "";
    public String serverIP = DRCWebservice_UtilityHelper.jtsIP;
    public int serverPort = DRCWebservice_UtilityHelper.jtsPort;
    public String cabinetName = "";
    public String processName = "";
    public String processDefID = "";
    public String siteName = "";
    public int siteID = 0;
    public String volName = "";
    public String volID = "";
    public String sessionID = "";
    public String ProcessFolderID = "";
    public String activityName = "";
    public String queueName = "";
    public String activityID = "";
    public String queueID = "";
    public String activityName1 = "";
    public String queueName1 = "";
    public String activityID1 = "";
    public String queueID1 = "";
    public String introActivityName = "";
    public String introQueueName = "";
    public String introActivityID = "";
    public String introQueueID = "";
    public String batchSize = "250";
    public String parentFolderIndex = "";
    public String parentFolderIndex1 = "";
    public String dataDefIndex = "";
    public String dataDefName = "AcOpening";
    public String dataDefProp[][];
    public int dataDefPropCount = 0;
   // public static NGEjbClient ngEjbClient = null;
   // public NGOEjbApi ngoEjbClient = new NGOEjbApi();
    
    public String sJTSIP="";
    public int sJTSPort=0;
    
    public String sSMSIP="";
    public int sSMSPort=0;
    
   // WFSDataOutputStream wfout;
  //  WFSDataInputStream wfin;
    Socket s = null;

  public FunctionsWI(){
	//boolean connect = connectToServer();
}


public boolean connectToServer() {
      try{
    	  System.out.println("In connectToServer");
    	  log.WriteSuccessLog("Connecting to Server.........","SuccessLog");
    	//  ngEjbClient = NGEjbClient.getSharedInstance();
          System.out.println("Afetr ngEjbClient getSharedInstance ////");
       //   ngEjbClient.initialize(SignImageDownloadUtilityHelper.jtsIP ,String.valueOf(SignImageDownloadUtilityHelper.jtsPort),"Jboss");
        System.out.println("ENDD ngEjbClient getSharedInstance");
          return true;
      }catch(Exception ngE){
          //log.generateLog(ngE.toString());
          log.WriteSuccessLog("Error in connecting with Server.........","SuccessLog");
          return false;
      }
  }
  public void disconnectFromServer() {
      try {
         // ngEjbClient=null;
          log.WriteSuccessLog("Disconnected from Server.........","SuccessLog");
      } catch (Exception e) {
          //log.generateLog(e.toString());
          log.WriteSuccessLog("Error in disconnecting from Server.........","SuccessLog");
      }
  }

  public String execute(String inXml) {
      try 
      {
    	  log.WriteSuccessLog("In execute method of FunctionsWI......","SuccessLog");
    	  System.out.println("In execute method of FunctionsWI......");
          log.WriteSuccessLog("In execute method of FunctionsWI 05122022","SuccessLog");
    	  sJTSIP=DRCWebservice_UtilityHelper.jtsIP;
    	  sJTSPort=DRCWebservice_UtilityHelper.jtsPort;
    	  log.WriteSuccessLog("Kavitha ---->JTSIP"+sJTSIP,"SuccessLog");
    	  log.WriteSuccessLog("Kavitha ---->JTSPort****"+sJTSPort,"SuccessLog");
          String outXml = WFCallBroker.execute(inXml,sJTSIP,sJTSPort, 1);
          //log.WriteSuccessLog("Kavitha ---->outXml"+outXml,"SuccessLog");
          xmlParser.setInputXML(outXml);
         // System.out.println("execute ; outXml : "+outXml);
          if (GlobalVar.printScreenflag == true) {
              log.WriteSuccessLog("Kavitha ---->JTSIP","SuccessLog");
              //log.generateLog(inXml);
              //log.generateLog(outXml);
              log.WriteSuccessLog("Input XML generated by execute method........."+inXml,"SuccessLog");
              log.WriteSuccessLog("Output XML generated by execute method........."+outXml,"SuccessLog");
          }
		if(this.xmlParser.getValueOf("Status").equals("-50146"))
		{
			System.out.println("dissconnected Now reconnect 1");
			log.WriteSuccessLog("Dissconnected Now reconnecting......","SuccessLog");
			String str =connectToWorkFlow("Y");
			//xmlParser.setInputXML(str);
			//SignImageDownloadUtilityHelper.sessionID=xmlParser.getValueOf("SessionId");
			String StrFirst=inXml.substring(0,inXml.indexOf("<SessionId>")+11);
			String StrLast=inXml.substring(inXml.indexOf("</SessionId>"));
			inXml = StrFirst+DRCWebservice_UtilityHelper.sessionID+StrLast;
			outXml = execute(inXml);
			log.WriteSuccessLog("Now reconnected......","SuccessLog");
		}
		if(this.xmlParser.getValueOf("MainCode").equals("11") && this.xmlParser.getValueOf("TypeOfError").equals("Invalid Session"))
		{
			System.out.println("dissconnected Now reconnect 2");
			log.WriteSuccessLog("Dissconnected Now reconnecting......","SuccessLog");
			String str =connectToWorkFlow("Y");
			//xmlParser.setInputXML(str);
			//SignImageDownloadUtilityHelper.sessionID=xmlParser.getValueOf("SessionId");
			System.out.println("Now SignImageDownloadUtilityHelper.sessionID"+DRCWebservice_UtilityHelper.sessionID);
			String StrFirst=inXml.substring(0,inXml.indexOf("<SessionId>")+11);
			String StrLast=inXml.substring(inXml.indexOf("</SessionId>"));
			
			System.out.println("StrFirst===="+StrFirst+"=====StrLast======="+StrLast);
			inXml = StrFirst+DRCWebservice_UtilityHelper.sessionID+StrLast;
			System.out.println("outXml ..."+outXml );
			outXml = execute(inXml);
			log.WriteSuccessLog("Now reconnected......","SuccessLog");
		}
          return outXml;
      } 
      catch (NGException ngE) {
          //log.generateLog(ngE.toString());
          log.WriteSuccessLog("Exception occured while executing input XML.........","SuccessLog");
          System.out.println("Exception occured while executing input XML.........");
          disconnectFromServer();
          if (connectToServer()) {
              try {
                 // String outXml = ngEjbClient.makeCall(inXml);
            	  sJTSIP=DRCWebservice_UtilityHelper.jtsIP;
            	  sJTSPort=DRCWebservice_UtilityHelper.jtsPort;
                  String outXml = WFCallBroker.execute(inXml,sJTSIP,sJTSPort, 1);
                  if (GlobalVar.printScreenflag == true) {
                      //log.generateLog(inXml);
                      //log.generateLog(outXml);
                      log.WriteSuccessLog("Input XML........."+inXml,"SuccessLog");
                      log.WriteSuccessLog("Input XML........."+outXml,"SuccessLog");
                  }
                  return outXml;
              } catch (NGException ngE1) {
                  //log.generateLog(ngE1.toString());
                  log.WriteSuccessLog("NGException........."+ngE1,"SuccessLog");
                  System.out.println("NGException........."+ngE1);
              } catch (Exception ex) {
                  //log.generateLog(ex.toString());
                  log.WriteSuccessLog(ex.toString(),"SuccessLog");
                  System.out.println(ex.toString());
              }
          }
          return "";
      }
      catch(Exception ee)
      {
    	  log.WriteSuccessLog(ee.toString(),"SuccessLog");
    	  ee.printStackTrace();
    	  return "";
      }
  }

  
    public String connectToWorkFlow(String forceful) {
        int i = -9;
        String desc = null;
        String xmlInput = null;
        String xmlOutput = null;
        try {   
        	sJTSIP=DRCWebservice_UtilityHelper.jtsIP;
      	  	sJTSPort=DRCWebservice_UtilityHelper.jtsPort;
      	  	
        	System.out.println("iiiiiiiiiiiiipppppppppppppppp"+sJTSIP+"POOOOOOOOOORRRRRRRRRRRRTTTTTTTTTTTttttttt"+sJTSPort+"ConnectTo workflow++++"+DRCWebservice_UtilityHelper.cabinetName+"==AND=="+DRCWebservice_UtilityHelper.userName+"==AND=="+DRCWebservice_UtilityHelper.userPassword+"==AND=="+forceful);
            xmlInput = XMLGen.get_WMConnect_Input(DRCWebservice_UtilityHelper.
                                                  cabinetName, DRCWebservice_UtilityHelper.userName,
                                                  DRCWebservice_UtilityHelper.userPassword, forceful);
            System.out.println("Input XML is :"+xmlInput);
            
            //xmlOutput = this.executeWithoutInLog(xmlInput);
            
            
            xmlOutput =WFCallBroker.execute(xmlInput,sJTSIP,sJTSPort, 1);
            System.out.println("Output xml is :"+xmlOutput);
            //System.out.println("444");
            xmlParser.setInputXML(xmlOutput);
            log.WriteSuccessLog("Connect to WorkFlow input XML "+xmlInput,"SuccessLog");
            log.WriteSuccessLog("Connect to WorkFlow output XML "+xmlOutput,"SuccessLog");
            String s9 = xmlParser.getValueOf("Option");
            if (!s9.equalsIgnoreCase("WMConnect")) {
            	log.WriteSuccessLog("Invalid Workflow Server IP and Port are registered.","SuccessLog");
                return "-9~Invalid Workflow Server IP and Port are registered.";
            }
            String s6 = xmlParser.getValueOf("MainCode");
            i = Integer.parseInt(s6);
            if (i == 0) {
            	System.out.println("Setting sessionID :: "+xmlParser.getValueOf("SessionID"));
            	DRCWebservice_UtilityHelper.sessionID = xmlParser.getValueOf("SessionID");
            	DRCWebservice_UtilityHelper.userID = xmlParser.getValueOf("ID");
            	System.out.println("After Setting sessionID :: "+DRCWebservice_UtilityHelper.sessionID);
                //System.out.println("666");
            } else {
                String s7 = xmlParser.getValueOf("SubErrorCode");
                desc = xmlParser.getValueOf("Description");
                i = Integer.parseInt(s7);
                
            }
        } catch (Exception e) {
            //log.generateLog(e.toString());
        	System.out.println("e.toString()+"+e.toString());
            //log.WriteSuccessLog("Exception occured while connecting to WorkFlow...."+e);
            elog.WriteErrorData("Exception occured while connecting to WorkFlow...."+e, DRCWebservice_UtilityHelper.ErrorLogPath, "ErrorLog");
            e.printStackTrace();
        }
        System.out.println("End of ConnectTo Workflow");
        return i + "~" + desc;
    }

  

    public void disconnectFromWorkFlow() {
        String str_inxml = XMLGen.get_WMDisConnect_Input(DRCWebservice_UtilityHelper.cabinetName,
        		DRCWebservice_UtilityHelper.sessionID);
        String str_outxml = execute(str_inxml);
    }

  

}

